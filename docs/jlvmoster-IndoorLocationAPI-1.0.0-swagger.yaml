swagger: '2.0'
info:
  description: |
    This is the API for the Honeywell Spatial Analysis Senior Design project.
  version: 1.0.0
  title: Indoor Location API
  contact:
    email: jmoster6@gatech.edu
host: localhost:8080
basePath: /api/v1
tags:
  - name: employee
    description: Operations about employees
  - name: equipment
    description: Operations about equipment
  - name: location
    description: Operations about location
  - name: geofence
    description: Operations about geofenced regions
  - name: floorplan
    description: Operations about stored floorplans
  - name: router
    description: Operations about router configurations
  - name: sensor
    description: Operations about sensor configurations
schemes:
- http
paths:
  /employee/add:
    post:
      tags:
        - employee
      summary: Add an employee
      description: Add a new employee to the system
      operationId: addEmployee
      parameters:
        - name: body
          in: body
          description: Employee object that will be added to the system
          required: true
          schema:
            $ref: '#/definitions/Employee'
      responses:
        201:
          $ref: '#/responses/Created'
        400:
          $ref: '#/responses/BadRequest'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/InternalServerError'
  /employee/get/all:
    get:
      tags:
      - employee
      summary: Retrieve all employees
      description: Returns all employees from the system
      operationId: getAllEmployees
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Employee'
        500:
          $ref: '#/responses/InternalServerError'
  /employee/get/{employeeId}:
    get:
      tags:
        - employee
      summary: Retrieve an employee
      description: Returns a single employee from the system
      operationId: getEmployeeById
      parameters:
        - name: employeeId
          in: path
          description: Id of employee to get
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Employee'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /employee/update/{employeeId}:
    put:
      tags:
        - employee
      summary: Update an employee
      description: Update an existing employee in the system
      operationId: updateEmployeeById
      parameters:
        - name: employeeId
          in: path
          description: Id of employee to update
          required: true
          type: string
        - name: body
          in: body
          description: Employee object that updates the retrieved employee
          required: true
          schema:
            $ref: '#/definitions/Employee'
      responses:
        200:
          description: OK
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /employee/delete/{employeeId}:
    delete:
      tags:
        - employee
      summary: Delete an employee
      description: Deletes a single employee from the system
      operationId: deleteEmployeeById
      parameters:
        - name: employeeId
          in: path
          description: Id of employee to delete
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /equipment/add:
    post:
      tags:
        - equipment
      summary: Add equipment
      description: Add equipment information to the system
      operationId: addEquipment
      parameters:
        - name: body
          in: body
          description: Equipment object that will be added to the system
          required: true
          schema:
            $ref: '#/definitions/Equipment'
      responses:
        201:
          $ref: '#/responses/Created'
        400:
          $ref: '#/responses/BadRequest'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/InternalServerError'
  /equipment/get/all:
    get:
      tags:
      - equipment
      summary: Retrieve all equipments
      description: Returns all equipments from the system
      operationId: getAllEquipments
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Equipment'
        500:
          $ref: '#/responses/InternalServerError'
  /equipment/get/{equipId}:
    get:
      tags:
        - equipment
      summary: Get equipment
      description: Get equipment information from the system
      operationId: getEquipmentById
      parameters:
        - name: equipId
          in: path
          description: Equipment id of equipment to get from system
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Equipment'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /equipment/update/{equipId}:
    put:
      tags:
        - equipment
      summary: Update equipment
      description: Update existing equipment in the system
      operationId: updateEquipmentById
      parameters:
        - name: equipId
          in: path
          description: Id of equipment to update
          required: true
          type: string
        - name: body
          in: body
          description: Equipment object that updates the retrieved equipment
          required: true
          schema:
            $ref: '#/definitions/Equipment'
      responses:
        200:
          description: OK
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /equipment/pair/{equipId}:
    put:
      tags:
      - equipment
      summary: Pair equipment
      description: Pair existing equipment in the system to existing employee
      operationId: pairEquipmentById
      parameters:
      - name: equipId
        in: path
        description: Id of equipment to update
        required: true
        type: string
      - name: body
        in: body
        description: EmployeeId to pair
        required: true
        schema:
          type: object
          properties:
            employeeId:
              type: string
              description: employeeId to pair equipment to
              example: 123456789
      responses:
        200:
          description: OK
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /equipment/delete/{equipId}:
    delete:
      tags:
        - equipment
      summary: Delete equipment
      description: Deletes equipment from the system
      operationId: deleteEquipmentById
      parameters:
        - name: equipId
          in: path
          description: Id of equipment to delete
          required: true
          type: string
      responses:
        200:
          description: OK
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /location/add:
    post:
      tags:
      - location
      summary: Add location of equipment (update)
      description: For tags to call to update their location
      operationId: addLocation
      parameters:
      - name: body
        in: body
        description: Location object that will be added to the system
        required: true
        schema:
          $ref: '#/definitions/Location'
      responses:
        201:
          $ref: '#/responses/Created'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /location/getByEmployeeId/{employeeId}:
    get:
      tags:
        - location
      summary: Get location history
      description: Get location history using employeeId of employee
      operationId: getLocationByEmployeeId
      parameters:
        - name: employeeId
          in: path
          description: Id of employee to get location history
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Location'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /location/getByEquipId/{equipId}:
    get:
      tags:
        - location
      summary: Get location history
      description: Get location history using equipId of equipment
      operationId: getLocationByEquipId
      parameters:
        - name: equipId
          in: path
          description: Id of equipment to get location history
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Location'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /geofence/add:
    post:
      tags:
        - geofence
      summary: Add geofence (can have multiple boundaries)
      description: Add a new geofence to the system (TODO - and update equipment statuses)
      operationId: addGeofence
      parameters:
        - name: body
          in: body
          description: Geofence object that will be added to the system
          required: true
          schema:
            $ref: '#/definitions/Geofence'
      responses:
        201:
          $ref: '#/responses/Created'
        400:
          $ref: '#/responses/BadRequest'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/InternalServerError'
  /geofence/get:
    get:
      tags:
        - geofence
      summary: Retrieve geofence
      description: Returns geofence from the system
      operationId: getGeofence
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Geofence'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /geofence/update:
    put:
      tags:
        - geofence
      summary: Update geofence
      description: Update geofence in the system (TODO - and update equipment statuses)
      operationId: updateGeofence
      parameters:
        - name: body
          in: body
          description: Geofence object that updates the retrieved geofence
          required: true
          schema:
            $ref: '#/definitions/Geofence'
      responses:
        200:
          description: OK
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /geofence/delete:
    delete:
      tags:
        - geofence
      summary: Delete geofence
      description: Deletes geofence from the system (TODO - and update equipment statuses)
      operationId: deleteGeofence
      responses:
        200:
          description: OK
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /floorplan/add:
    post:
      tags:
        - floorplan
      summary: Add a floorplan image (png or jpeg) under 5MB
      description: Add a floorplan image to the system. Must be .png or .jpg/.jpeg and smaller than 5MB
      operationId: addFloorplan
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: floorplan
          type: file
          description: The image to upload.
          required: true
      responses:
        201:
          $ref: '#/responses/Created'
        400:
          $ref: '#/responses/BadRequest'
        409:
          $ref: '#/responses/Conflict'
        415:
          $ref: '#/responses/UnsupportedMediaType'
        500:
          $ref: '#/responses/InternalServerError'
  /floorplan/get:
    get:
      tags:
        - floorplan
      summary: Retrieve floorplan
      description: Returns floorplan from the system
      operationId: getFloorplan
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Floorplan'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
  /floorplan/update:
    put:
      tags:
        - floorplan
      summary: Update floorplan image (png or jpeg) under 5MB
      description: Update floorplan in the system. Must be .png or .jpg/.jpeg and smaller than 5MB
      operationId: updateFloorplan
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: floorplan
          type: file
          description: The image to upload.
          required: true
      responses:
        200:
          description: OK
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        415:
          $ref: '#/responses/UnsupportedMediaType'
        500:
          $ref: '#/responses/InternalServerError'
  /floorplan/delete:
    delete:
      tags:
        - floorplan
      summary: Delete floorplan
      description: Deletes floorplan from the system
      operationId: deleteFloorplan
      responses:
        200:
          description: OK
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalServerError'
definitions:
  Employee:
    type: object
    required:
      - employeeId
      - firstName
      - lastName
      - role
    properties:
      employeeId:
        type: string
        description: Employee id
        example: 123abc789
      firstName:
        type: string
        description: First name
        example: John
      lastName:
        type: string
        description: Last name
        example: Doe
      role:
        type: string
        enum:
          - admin
          - manager
          - worker
        description: Employee role (affects security privileges)
      # status:
      #   type: string
      #   enum:
      #     - safe
      #     - warning
      #     - danger
      #   description: Current safety condition
      # equipIds:
      #   type: array
      #   items:
      #     $ref: '#/definitions/Equipment'
      #   description: Array of equipment belonging to an employee
  Equipment:
    type: object
    required:
      - equipId
      - name
      - mac
    properties:
      equipId:
        type: string
        description: Equipment reference id
        example: 123abc789
      name:
        type: string
        description: Name of equipment
        enum:
        - Hard Hat
        - Left Boot
        - Right Boot
      mac:
        type: string
        pattern: '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
        description: Equipment MAC address
        example: 'E6:4F:09:AA:D1:0B'
      assignedEmployeeId:
        type: string
        description: Id of employee equipment is assigned to
        example: 123456789
      isWorn:
        type: boolean
        description: Latest update whether the equipment is being worn according to sensors (updated by server from added location)
        example: true
      inSafeArea:
        type: boolean
        description: Latest update whether the equipment is in a safe area (calculated by server)
        example: true
      latestX:
        type: number
        format: float
        description: Latest x coordinates (updated by server from added location)
        example: -0.5555556
      latestY:
        type: number
        format: float
        description: Latest y coordinates (updated by server from added location)
        example: -9
  Location:
    type: object
    required:
      - equipId
      # - name
      - mac
      - timeRecorded
      - wifiScan
      - weightSensor
    properties:
      equipId:
        type: string
        description: Equipment reference id
        example: 123abc789
      # name:
      #   type: string
      #   description: Name of equipment
      #   enum:
      #   - Hard Hat
      #   - Left Boot
      #   - Right Boot
      mac:
        type: string
        pattern: '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
        description: Equipment MAC address
        example: 'E6:4F:09:AA:D1:0B'
      timeRecorded:
        type: string
        format: date-time
        description: Time that the wifiScan was recorded
      wifiScan:
        type: array
        items:
          type: object
          properties:
            ssid:
              type: string
            bssid:
              type: string
            rssi:
              type: integer
              format: int64
            channel:
              type: integer
              format: int64
      weightSensor:
        type: number
        format: float
      assignedEmployeeId:
        type: string
        description: Id of employee equipment is assigned to (can be retrieved by server)
        example: 123456789
      isWorn:
        type: boolean
        description: Whether the equipment is being worn according to sensors
        example: true
      inSafeArea:
        type: boolean
        description: Whether the equipment is in a safe area (calculated by server from coordinates)
        example: true
      x:
        type: number
        format: float
        description: X coordinate (calculated by server from wifiScan)
        example: 0.5555556
      y:
        type: number
        format: float
        description: Y coordinate (calculated by server from wifiScan)
        example: 0.6
  Geofence:
    type: object
    required:
      - boundaries
    properties:
      boundaries:
        type: array
        items:
          type: object
          required:
            - vertices
          properties:
            vertices:
              type: array
              items:
                type: object
                required:
                  - x
                  - y
                properties:
                  x:
                    type: number
                    format: float
                  y:
                    type: number
                    format: float
              description: A list of x and y coordinates that make up a polyline (at least 3)
              example:
                - x: 0.2
                  y: 0.2
                - x: 0.5
                  y: 0.2
                - x: 0.2
                  y: 0.5
            safetyLevel:
              type: string
              enum:
                - safe
                - warning
                - danger
              description: Safety level of the boundary
  Floorplan:
    type: object
    properties:
      contentType:
        type: string
        description: mimetype of file
        example: image/png
      size:
        type: number
        description: size of the file in bytes
        example: 90132
      imgData:
        type: string
        description: data of the image file to be placed in <img src={*here*}/>
    # required:
    #   - floorId
    # properties:
    #   floorId:
    #     type: string
    #     description: Reference id of floor plan
    #     example: 123abc789
    #   name:
    #     type: string
    #     description: Floor name
    #     example: Floor 6
    #   mapType:
    #     type: string
    #     enum:
    #       - PIC
    #       - JSON
    #     description: The returned map format of the floor plan
    #   source:
    #     type: string
    #     format: byte
    #     description: Base64 encoded map data of an image file or json string (depending on map type)
    #   ppm:
    #     type: number
    #     format: float
    #     description: Pixel per meter of image map
    #     example: 1.69358
    #   width:
    #     type: integer
    #     format: int64
    #     description: Width in pixel of image map
    #     example: 689
    #   height:
    #     type: integer
    #     format: int64
    #     description: Height in pixel of image map
    #     example: 1400
    #   corners:
    #     type: object
    #     properties:
    #       nw:
    #         type: object
    #         properties:
    #           x:
    #             type: integer
    #             format: int64
    #             example: 103
    #           y:
    #             type: integer
    #             format: int64
    #             example: 272
    #       ne:
    #         type: object
    #         properties:
    #           x:
    #             type: integer
    #             format: int64
    #             example: 568
    #           y:
    #             type: integer
    #             format: int64
    #             example: 411
    #       sw:
    #         type: object
    #         properties:
    #           x:
    #             type: integer
    #             format: int64
    #             example: 600
    #           y:
    #             type: integer
    #             format: int64
    #             example: 1176
    #       se:
    #         type: object
    #         properties:
    #           x:
    #             type: integer
    #             format: int64
    #             example: 157
    #           y:
    #             type: integer
    #             format: int64
    #             example: 1296
    #     description: Object containing x, y coordinates of the four corners of the floor image
responses:
  Created:
    description: Created
    headers:
      Location:
        type: string
        description: URL of created resource
    schema:
        type: object
        properties:
          message:
            type: string
            description: Success Message
  BadRequest:
    description: Bad Request
    schema:
      type: object
      properties:
        message:
          type: string
          description: Validation Error or Invalid Body
        error:
          type: object
          description: Actual error object
  UnsupportedMediaType:
    description: Unsupported Media Type
    schema:
      type: object
      properties:
        message:
          type: string
          description: Unsupported Media Type
        error:
          type: object
          description: Accepted file types are...
  NotFound:
    description: Not Found
    schema:
      type: object
      properties:
        message:
          type: string
          description: Specified resource was not found
  Conflict:
    description: Conflict (Duplicate Key, Ids, etc.)
    schema:
      type: object
      properties:
        message:
          type: string
          description: Duplicate Key
        error:
          type: object
          description: Actual error object
  InternalServerError:
    description: Internal Server Error
    schema:
      type: object
      properties:
        message:
          type: string
          description: Error Message
        error:
          type: object
          description: Actual error object
